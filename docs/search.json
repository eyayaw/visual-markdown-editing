[
  {
    "href": "citations.html#bibliographies",
    "title": "Citations",
    "section": "Bibliographies",
    "text": "R Markdown supports bibliographies in a wide variety of formats including BibTeX and CSL. Add a bibliography to your document using the bibliography YAML metadata field. For example:\n---\ntitle: \"My Document\"\nbibliography: references.bib\nlink-citations: true\n---\nNote that we’ve also specified the link-citations option, which will make your citations hyperlinks to the corresponding bibliography entries.\nSee the Pandoc Citations documentation for additional information on bibliography formats."
  },
  {
    "href": "citations.html#inserting-citations",
    "title": "Citations",
    "section": "Inserting Citations",
    "text": "You insert citations by either using the Insert -> Citation command or by using markdown syntax directly (e.g. [@cite] or @cite) .\nCitations go inside square brackets and are separated by semicolons. Each citation must have a key, composed of ‘@’ + the citation identifier from the database, and may optionally have a prefix, a locator, and a suffix. The citation key must begin with a letter, digit, or _, and may contain alphanumerics, _, and internal punctuation characters (:.#$%&-+?<>~/). Here are some examples:\n\n  \n    Blah Blah [see @doe99, pp. 33-35; also @smith04, chap. 1].\n  \n\n\n  Blah Blah [@doe99, pp. 33-35, 38-39 and passim].\n  \n\n\n  Blah Blah [@smith04;\n  @doe99].\n\n  Smith says blah [-@smith04].\n  \n\nYou can also write in-text citations, as follows:\n\n  \n    @smith04 says blah.\n  \n  \n    @smith04 [p. 33] says blah.\n  \n\nSee the Pandoc Citations documentation for additional information on citation syntax.\nUse the  toolbar button or the ⇧⌘ F8 keyboard shortcut to show the Insert Citation dialog:\n\nNote that you can insert multiple citations by using the add button on the right side of the item display.\n\nMarkdown Syntax\nYou can also insert citations directly using markdown syntax (e.g. [@cite]). When you do this a completion interface is provided for searching available citations:\n\n\n\nCitation IDs\nBefore inserting a citation from an external source you will may wish to customize it’s ID. Within the Insert Citation dialog, click the edit button on the right side of citations to change their ID:\n\nIf you insert a new citation via code completion, you will also be provided with the opportunity to change its default citation ID.\nFor citations inserted from Zotero, you can also use the Better BibTeX plugin to generate citation IDs (this can be enabled via Citation Options if you have Better BibTeX installed).\n\n\nCitation Preview\nOnce you’ve inserted a citation, place the cursor over it to see a preview of it along with a link to the source if one is available:"
  },
  {
    "href": "citations.html#citations-from-zotero",
    "title": "Citations",
    "section": "Citations from Zotero",
    "text": "Zotero is a popular free and open source reference manager. If you use Zotero, you can also insert citations directly from your Zotero libraries. If you have Zotero installed locally it’s location will be detected automatically and citations from your main library (My Library) will be available:\n\nZotero references will also show up automatically in completions:\n\nItems from Zotero will appear alongside items from your bibliography with a small “Z” logo juxtaposed over them. If you insert a citation from Zotero that isn’t already in your bibliography then it will be automatically added to the bibliography.\nIf you are running both RStudio and Zotero on your desktop, then no additional configuration is required for connecting to your Zotero library. If however you using RStudio Server and/or want to access your Zotero library over the web, then a few more steps are required (see the Zotero Web API section for details).\n\nGroup Libraries\nZotero Groups provide a powerful way to share collections with a class or work closely with colleagues on a project. By default, Zotero Group Libraries are not included in the Insert Citation dialog or citation completions. However, there are options available to use group libraries at a global, per-project, or per-document level.\nFor example, here we specify a project-level option to use the Reproducible Research Series (Year 1) group library:\n\nYou can also specify one or more libraries within YAML. For example:\n---\ntitle: \"Reproducible Research\"\nzotero: \"Reproducible Research Series (Year 1)\"\n---\nNote that you can also turn off Zotero entirely for a document using zotero: false:\n---\ntitle: \"Reproducible Research\"\nzotero: false\n---"
  },
  {
    "href": "citations.html#citations-from-dois",
    "title": "Citations",
    "section": "Citations from DOIs",
    "text": "Use the From DOI pane of the Insert Citation dialog to insert a citation based on a DOI (e.g that you have retrieved from a PubMed or other search):\n\nIf you are using markdown syntax, you can also paste a DOI after the [@ and it will be looked up:\n\nOnce you’ve confirmed that it’s the correct work (and possibly modified the suggested ID), the citation will be inserted into the document and an entry for the work added to your bibliography."
  },
  {
    "href": "citations.html#citations-from-search",
    "title": "Citations",
    "section": "Citations from Search",
    "text": "Use the Crossref, DataCite, and PubMed panes of the Insert Citation dialog to search one of those services for a citation:\n\nItems inserted from a search will automatically be added to your bibliography.\nNote that for PubMed queries you can use the full supported query syntax. For example, this query searches on the author and title fields: Peterson[Author] AND Embolism[Title]. You can learn more about building PubMed queries here: https://pubmed.ncbi.nlm.nih.gov/advanced/."
  },
  {
    "href": "citations.html#zotero-web-api",
    "title": "Citations",
    "section": "Zotero Web API",
    "text": "If you are using RStudio Server and/or don’t have Zotero installed locally, you can still access your Zotero library using the Zotero Web API (assuming you have a Zotero web account and have synced your libraries to your account).\n\n\n\n\n\n\nIf you are running RStudio Desktop, it’s generally easier to also run Zotero on your desktop and access your library locally. That said, it is possible to access Zotero web libraries from RStudio Desktop if you prefer that configuration.\n\n\n\n\nAPI Access Key\nRStudio accesses Zotero web libraries using the Zotero Web API, so the first step is to create a Zotero account and then configure Zotero to sync it’s data to your account. You can do this using the Sync tab of the Zotero preferences:\n\nOnce you’ve configured your library to sync, you need to create a Zotero API Key to use with RStudio:\n\nFollow the instructions to create a new access key. Note that if you want to use Group Libraries with RStudio that you should change the default to provide read-only access to groups (as illustrated above).\nBe sure to record your key after generating it (i.e. copy it to the clipboard and/or save it somewhere more permanent) as you won’t be able to view it again after you navigate away.\nFinally, go to the R Markdown -> Citations preferences to connect Zotero to RStudio using your key:\n\nSet the Zotero Library option to “Web”, then paste in your Zotero Web API Key. You can use Verify Key… button to confirm that your Zotero API key is working correctly.\nOnce you’ve confirmed your connection you are ready to start inserting citations from Zotero."
  },
  {
    "href": "content.html#editing-tables",
    "title": "Content Editing",
    "section": "Editing Tables",
    "text": "You can insert a table using the Table menu. You can then use either the main menu or a context menu to insert and delete table rows and columns:\n\nNote that if you select multiple rows or columns the insert or delete command will behave accordingly. For example, to insert 2 rows, first select 2 rows then use the insert command.\nWhen you make a selection of multiple rows and/or columns as illustrated above, you can also copy and paste groups of cells within the table."
  },
  {
    "href": "content.html#editing-lists",
    "title": "Content Editing",
    "section": "Editing Lists",
    "text": "As described above, you can create a new list by just typing - or 1. at the beginning of an empty paragraph. To add items to the list, just press Enter within a list item. To exit the list, press Enter within an empty list item.\nWhile this covers many simple list editing tasks, there is a variety of other actions you may want to take within lists, including creating nested lists and adding paragraphs or code blocks to an exiting list item. From an empty list item (pictured at left), the following keyboard gestures can be used to do this:\n\n\n\n\n\n\n\n\nEmpty Item (enter to exit list)\nTab (add sublist)\nBackspace  (add block)\n\n\n\n\n\n\n\n\n\n\nYou can also use Shift+Tab to lift a list item into the previous level.\n\nTight Lists\nMarkdown distinguishes between normal and tight lists, where tight lists have less vertical spacing between items. In markdown source code, you designate a tight list by having no empty lines between your list items.\nVisual mode creates normal lists by default (you can change this behavior via Editor Options). You can toggle between normal and tight lists using the ⌥⌘ 9 keyboard shortcut. You can also change the list type using the Format -> Edit Attributes dialog (also accessible via the F4 shortcut). If you have existing tight lists in your markdown source files, they will remain so within the visual editor."
  },
  {
    "href": "content.html#pandoc-attributes",
    "title": "Content Editing",
    "section": "Pandoc Attributes",
    "text": "Several of Pandoc’s block types (e.g. headings, code blocks, and divs) enable you to specify a set of custom attributes. Attributes include IDs and class names, as well as arbitrary key-value pairs that are passed through to output formats (e.g. as attributes for HTML tags). For these block types, an edit button will appear at the the top right when your cursor is within the block:\n\nNote that any ID as well as the first class specified within the attributes are also displayed. Click the edit button or use the F4 keyboard shortcut to edit the attributes."
  },
  {
    "href": "content.html#special-characters",
    "title": "Content Editing",
    "section": "Special Characters",
    "text": "Hard Line Breaks\nYou can insert a hard line break using the Insert -> Special Characters -> Hard Line Break command or via the ⇧ Enter keyboard shortcut.\n\n\nNon-Breaking Spaces\nYou can insert a non-breaking space using the Insert -> Special Characters -> Non-Breaking Space command or via the ⌃ Space keyboard shortcut. Non-breaking spaces are displayed with an alternate background color to distinguish them from normal spaces.\nA markdown non-breaking space will result in the &nbsp; character within HTML output and a ~ character within LaTeX output.\n\n\nEmojis\nTo insert an emoji, you can use either the Insert menu or the requisite markdown shortcut plus auto-complete:\n\n\n\nInsert -> Special Characters -> Emoji…\nMarkdown Shortcut\n\n\n\n\n\n\n\n\n\nFor markdown formats that support text representations of emojis (e.g. :grinning:), the text version will be written. For other formats the literal emoji character will be written. Currently, GitHub Flavored Markdown and Hugo (with enableEmjoi = true in the site config) both support text representation of emojis.\n\n\nUnicode Symbols\nTo insert an arbitrary Unicode character, use Insert -> Special Characters -> Unicode…:\n\nYou can search for characters either by name or by entering an explicit Unicode code point (e.g. “U+0420”).\n\n\nSmart Punctuation\nWhen the Pandoc smart extension is enabled (which it is by default), straight quotes are interpreted as curly quotes, --- as em-dashes, -- as en-dashes, and ... as ellipses. In addition, non-breaking spaces are inserted after certain abbreviations, such as “Mr.”\nVisual mode supports these same transformations (so when you type --- it becomes an em-dash). If you didn’t intend for this transformation to occur just hit backspace and it will be reverted."
  },
  {
    "href": "content.html#spell-checking",
    "title": "Content Editing",
    "section": "Spell-Checking",
    "text": "When RStudio real time spell-checking is enabled (you can do this using Spelling preferences), misspelled words will be underlined as you type:\n\nTo resolve a spelling error, right-click on the misspelled word, then either choose an alternate spelling, ignore the word (which applies to the current document only), or add the word to your user dictionary (which applies to all documents).\nIf you ignore a word by mistake, right-click it again to unignore it. If you want to edit your personal dictionary, use the Edit User Dictionary… button located within Spelling preferences."
  },
  {
    "href": "content.html#commenting",
    "title": "Content Editing",
    "section": "Commenting",
    "text": "When reviewing an R Markdown document you often want to provide inline comments with suggested revisions. This is possible in R Markdown using HTML comments (which are ignored by all output formats). Visual mode includes a command for inserting HTML comments as well as special highlighting treatment to easily parse out editing comments from surrounding text.\n\nNote that the # prefix used in the comment is what triggers the special background highlighting. If you remove the # it will still be a valid HTML comment, but just won’t be highlighted as shown above.\nYou can insert an HTML comment using the Comment button on the toolbar or via the ⇧⌘ C keyboard shortcut. Remember, HTML comments won’t show up in rendered output so they are ideal both for review but also for leaving yourself to-do notes within a document."
  },
  {
    "href": "markdown.html#github-markdown",
    "title": "Markdown Formats",
    "section": "GitHub Markdown",
    "text": "When markdown is published on GitHub, it is rendered using a markdown variant called GitHub Flavored Markdown (or GFM). GFM supports most of the markdown constructs you are familiar with from Pandoc markdown, but it doesn’t have support for more advanced technical writing features like citations, footnotes, and definition lists.\nIf you are authoring an R Markdown document that targets the github_markdown output format (for example, a README.Rmd file in a git repo), then visual mode will automatically use GFM mode for authoring.\nIf you are authoring a plain .md file intended for viewing on GitHub, then you can use the mode markdown editor option to put the editor in GFM mode. For example:\n---\ntitle: \"My Document\"\neditor_options:\n  markdown:\n    mode: gfm\n---"
  },
  {
    "href": "markdown.html#hugo-markdown",
    "title": "Markdown Formats",
    "section": "Hugo Markdown",
    "text": "The Hugo static site generation framework is commonly used with R Markdown for creating blogs as well as larger websites (for example, the tidyverse and tidymodels websites use Hugo).\nThe blogdown and hugodown packages both support creating Hugo websites with R Markdown. This section describes visual mode features and considerations for Hugo documents.\n\nShortcodes\nHugo includes support for shortcodes, which are special macros generally used to render more complex objects (e.g. tweets or videos). You can include shortcodes in visual mode by just typing them with the normal Hugo syntax:\n\nSee the blogdown documentation for more information on using shortcodes.\n\n\nMarkdown Engine\nIf you use normal R Markdown files (.Rmd) within a blogdown website, their markdown is processed by Pandoc. However, if you use a plain markdown file (.md) or an R Markdown file with a special extension (.Rmarkdown), then markdown is processed by Hugo rather than Pandoc. If you are using the hugodown package with Hugo, then markdown is also always processed using Hugo.\nIn this case, RStudio will recognize that you aren’t using Pandoc, and adapt the editor’s markdown features accordingly (providing only the features supported by goldmark, the default Hugo markdown engine). The editor will also automatically enclose LaTeX math in backticks (required in order for Hugo to render equations).\n\n\n\n\n\n\nIf are using an older version of Hugo that uses blackfriday rather than goldmark (or have blackfriday explicitly configured as your default renderer), then this should be automatically detected by RStudio.\n\n\n\n\n\nMath\nEmbedding LaTeX math using $...$ or $$...$$ is not supported out of the box by goldmark. However, many commonly used Hugo themes (e.g Academic) do provide rendering of LaTeX math.\nAnother method for embedding LaTeX math in Hugo websites is to embed math expressions within code marks (e.g. `$\\sqrt{x}=25$`). This method is described in more detail at https://yihui.org/en/2018/07/latex-math-markdown/. Typically this code is included in a Hugo page footer as described here.\nVisual mode will detect the use of math-in-code via the presence of the layouts/partials/footer_mathjax.html file in the theme directory and automatically read and write math with backtick delimiters."
  },
  {
    "href": "markdown.html#bookdown",
    "title": "Markdown Formats",
    "section": "Bookdown",
    "text": "Cross References\nThe bookdown package includes markdown extensions for cross-references and part headers. Bookdown cross-references enable you to easily link to figures, equations, and even arbitrary labels within a document.\nIn raw markdown, you would for example write a cross-reference to a figure like this: \\@ref(fig:label). Cross-references are largely the same in visual mode, but you don’t need the leading \\ (which in raw markdown is used to escape the @ character). For example:\n\nAs shown above, when entering a cross-reference you can search across all cross-references in your project to easily find the right reference ID.\nNote that to create a table cross-reference you similarly omit the leading \\ when defining the reference. For example: (#tab:mytable) This is my table. In source mode you would have needed to escape the # so it would have been written as (\\#tab:mytable).\n\n\nPart Headers\nBookdown recognizes level 1 headers written with a (PART) prefix as book parts (analogous to the LaTeX \\part{} command). These work the same in visual mode, but if you use the special extension for unnumbered part headers (written in raw markdown as (PART\\*), you don’t need to include the escape character for the asterisk. You also should use the explicit {.unnumbered} class as opposed to the shorthand {-}. For example:\n\nSee the bookdown documentation for more information on part headers."
  },
  {
    "href": "markdown.html#document-types",
    "title": "Markdown Formats",
    "section": "Document Types",
    "text": "The bookdown and Hugo features described above are enabled using automatic detection of document types by RStudio. Detection is done using a combination of the current project configuration and the output formats specified in YAML front matter. If this automatic detection doesn’t align with your configuration, you can specify a document type manually using the editor_options:markdown key in YAML front matter.\nFor example, to specify that your document is being published with blogdown, use:\n---\ntitle: \"My Document\"\neditor_options:\n  markdown:\n    doctype: blogdown\n---\nTo specify that your document is being published with Hugo, use:\n---\ntitle: \"My Document\"\neditor_options:\n  markdown:\n    doctype: hugo\n---\nDocument types are a high level way of expressing a core markdown mode (e.g. markdown or gfm) and a set of markdown extensions. You can also perform this configuration explicitly (specifying arbitrary combinations of extensions), as described in the section below on Modes & Extensions\n\n\n\n\n\n\nNote that you typically don’t need to use an explicit doctype or otherwise do any configuration of modes or extensions, since RStudio can almost always correctly detect this based on the current project and document."
  },
  {
    "href": "markdown.html#modes-extensions",
    "title": "Markdown Formats",
    "section": "Modes & Extensions",
    "text": "Visual editing mode can author all of the markdown variants supported by Pandoc. By default, features associated with standard Pandoc markdown are enabled. You can change this behavior by adding an editor_options:markdown key to a document’s YAML front-matter.\n\nMode\nThe mode option specifies the base flavor of markdown you are editing. For example, to edit GitHub Flavored Markdown, you would use the following:\n---\ntitle: \"My Document\"\neditor_options:\n  markdown:\n    mode: gfm\n---\nMarkdown modes supported by the editor include:\n\n\n\nMode\nDescription\n\n\n\n\nmarkdown\nPandoc markdown w/ all standard extensions enabled.\n\n\nmarkdown_strict\nOriginal markdown behavior (from Markdown.pl)\n\n\nmarkdown_phpextra\nPHP Markdown Extra\n\n\ncommonmark\nStandard specification of core markdown features.\n\n\ngfm\nGitHub Flavored Markdown\n\n\ngoldmark\nGoldmark (default parser currently used by Hugo)\n\n\nblackfriday\nBlackfriday (default parser formerly used by Hugo)\n\n\n\n\n\nExtensions\nThe extensions option allows you to enable or disable individual Pandoc extensions. For example, to specify GitHub Flavored Markdown with additional support for TeX math and raw Tex, you would use this comment:\n---\ntitle: \"My Document\"\neditor_options:\n  markdown:\n    mode: gfm\n    extensions: +tex_math_dollars+raw_tex\n---\nAlternatively, to specify standard Pandoc markdown without TeX math and raw TeX, you would use this configuration (note the minus sign before the disabled extensions):\n---\ntitle: \"My Document\"\neditor_options:\n  markdown:\n    mode: markdown\n    extensions: -tex_math_dollars-raw_tex\n---\nYou can read more about Pandoc variants and extensions in the Pandoc Markdown documentation.\nMany R Markdown formats include an md_extensions option used to specify which Pandoc markdown extensions are active. The visual editor will also inspect this option. For example, emojis will be enabled for this configuration:\n---\ntitle: \"My Document\"\noutput:\n  html_document:\n    md_extensions: +emoji\n---\nYou can also explicitly enable R Markdown specific extensions using the rmd_extensions option. For example, to enable bookdown cross-references you would use this configuration:\n---\ntitle: \"My Document\"\neditor_options:\n  markdown:\n    rmd_extensions: +bookdown_cross_references\n---\nSimilarly, you can include +tex_math_dollars_in_code to specify that LaTeX math should be enclosed in code backticks.\n\n\nMagic Comment Syntax\nIf you are using a markdown rendered document that doesn’t either process or ignore YAML metadata, you can also specify all of the above using an Emacs style magic comment. Returning to our original example of adding Tex features to GitHub Flavored Markdown, the magic comment version would look like this:\n<!-- -*- mode: gfm; extensions: +raw_tex -*- -->\nNote the semicolon (;) used to delimit the mode and extensions options."
  },
  {
    "href": "markdown.html#markdown-output",
    "title": "Markdown Formats",
    "section": "Markdown Output",
    "text": "Visual editing mode generates markdown using Pandoc. This means that in some cases your markdown will be rewritten to conform to standard Pandoc idioms. For example, Pandoc inserts 3 spaces after list bullets and automatically escapes characters that might be used for markdown syntax.\nHere is a list of conventions for Pandoc generated markdown that might differ from your own markdown writing style:\n\n*text* is used in preference to _text_\nBacktick code blocks are written as ``` {.md} rather than ```md\nBacktick code blocks with no attributes are rendered as 4-space indented code blocks\nHorizontal rules are written as dashes spanning the full width of the document\nPlain links are written as <https://yihui.org> rather than https://yihui.org\nBullet and numbered lists use additional leading spaces before list item content\nThe blockquote character (>) is included on each new line of a blockquote\nTable captions are written below rather than above tables\nMultiline HTML and TeX blocks use the explicit raw attribute (e.g. ```{=tex})\nInline footnotes are replaced with footnotes immediately below the paragraph\nNested divs use ::: at all levels so long as their attributes are distinct\nUnnumbered sections are designated with {.unnumbered} rather than {-}\nCharacters used for markdown syntax (e.g. *, _, or #) are always escaped\n\nWhile some of this behavior might be bothersome at first, if you decide that visual editing mode is useful for your workflow it’s probably best to just adapt to writing your own markdown the same way that Pandoc does. Note that you can also configure source mode to write markdown using these conventions, ensuring that the same markdown is written no matter which mode edits originate from."
  },
  {
    "href": "markdown.html#writer-options",
    "title": "Markdown Formats",
    "section": "Writer Options",
    "text": "Some aspects of markdown output can be customized via global, project, or file-level options, including:\n\nHow to wrap / break lines (fixed column, sentence-per-line, etc.).\nWhere to write footnotes (below the current paragraph or section, or at the end of the document).\nWhether to use the visual mode markdown writer when saving markdown from source mode (to ensure consistency between documents saved from either mode).\n\nYou can set these options within the R Markdown Global Options or Project Options, or can alternatively set them on a per-file basis using YAML (as described below).\n\nLine Wrapping\nBy default, the visual editor writes Markdown with no line wrapping (paragraphs all occupy a single line). This matches the behavior of markdown source editing mode within RStudio.\nHowever, if you prefer to insert line breaks at a particular column (e.g. 72 or 80), or to insert a line break after each sentence, you can set a global or per-project editor option to this effect.\nYou can also set this behavior on a per-document basis via the wrap option. For example, to wrap lines after 72 characters you would use this:\n---\neditor_options:\n  markdown:\n    wrap: 72\n---\nTo insert a line break after each sentence, use wrap: sentence. For example:\n---\neditor_options:\n  markdown:\n    wrap: sentence\n---\n\n\n\n\n\n\nThe algorithm used for sentence wrapping will handle English and Japanese text well, but may not detect the end of sentences accurately for other languages.\n\n\n\nIf you have enabled a global line wrapping option and want to turn off wrapping for a given document, use wrap: none.\n\n\nReferences\nBy default, references are written at the end of the block where their corresponding footnote appears. You can override this behavior using the references option.\nFor example, to write references at the end of sections rather than blocks you would use:\n---\ntitle: \"My Document\"\neditor_options:\n  markdown:\n    references: \n      location: block\n---\nValid values for the references option are block, section, and document.\nNote that you can also set a global or per-project editor option to control reference writing behavior.\nIf you are aggregating a set of markdown documents into a larger work, you may want to make sure that reference identifiers are unique across all of your documents (e.g. you don’t want to have [^1] appear multiple times). You can ensure uniqueness via the prefix option. For example:\n---\ntitle: \"My Document\"\neditor_options:\n  markdown:\n    references: \n      location: block\n      prefix: \"mydoc\"\n---\nThis will result in footnotes in this document using the specified prefix (e.g. [^mydoc-1]), ensuring they are globally unique across the manuscript.\n\n\n\n\n\n\nNote that if you are within a bookdown project then a references prefix is applied automatically so no changes to editor_options are required.\n\n\n\n\n\nCanonical Mode\nIf you have a workflow that involves editing in both visual and source mode, you may want to ensure that the same markdown is written no matter which mode edits originate from. You can accomplish this using the canonical option. For example:\n---\ntitle: \"My Document\"\neditor_options:\n  markdown:\n    wrap: 72\n    references: \n      location: block\n    canonical: true\n---\nWith canonical: true, edits in visual mode and source mode will result in identical markdown output. This is especially useful if you have multiple authors collaborating using version control, with a mixture of source and visual mode editing among the authors."
  },
  {
    "href": "markdown.html#known-limitations",
    "title": "Markdown Formats",
    "section": "Known Limitations",
    "text": "There are a handful of Pandoc markdown extensions not currently supported by visual editing. These are infrequently used extensions, so in all likelihood they won’t affect documents you edit, but are still worth noting.\n\n\n\nExtension(s)\nExample\nBehavior\n\n\n\n\nInline footnotes\n[^1]\nConverted to numeric footnote.\n\n\nFootnote identifiers\n[^longnote]\nConverted to numeric footnote.\n\n\nExample lists\n(@) First example\nRead/written as ordinary numbered lists.\n\n\nAuto-list numbers\n#. First item\nRead/written as ordinary numbered lists.\n\n\nReference links\nThis is a [link]\nConverted to ordinary links.\n\n\nMultiMarkdown attributes\n# Heading [id]\nConverted to Pandoc attributes.\n\n\n\nThe visual editor is unable to parse non-YAML title blocks (e.g. old-style % titles or MultiMarkdown titles) and also unable to parse non top-level YAML metadata blocks. If these forms of metadata are encountered, visual mode will fail to load with a warning."
  },
  {
    "href": "technical.html#equations",
    "title": "Technical Writing",
    "section": "Equations",
    "text": "LaTeX equations are authored using standard Pandoc markdown syntax (the editor will automatically recognize the syntax and treat the equation as math). When you aren’t directly editing an equation it will appear as rendered math:\n\nAs shown above, when you select an equation with the keyboard or mouse you can edit the equation’s LaTeX. A preview of the equation will be shown below it as you type."
  },
  {
    "href": "technical.html#cross-references",
    "title": "Technical Writing",
    "section": "Cross References",
    "text": "The bookdown package includes markdown extensions for cross-references and part headers. The blogdown package also supports bookdown style cross-references as does the distill package.\nBookdown cross-references enable you to easily link to figures, equations, and even arbitrary labels within a document. In raw markdown, you would for example write a cross-reference to a figure like this: \\@ref(fig:label). Cross-references are largely the same in visual mode, but you don’t need the leading \\ (which in raw markdown is used to escape the @ character). For example:\n\nAs shown above, when entering a cross-reference you can search across all cross-references in your project to easily find the right reference ID.\nSimilar to hyperlinks, you can also navigate to the location of a cross-reference by clicking the popup link that appears when it’s selected:\n\nYou can also navigate directly to any cross-reference using IDE global search:\n\nSee the bookdown documentation for more information on cross-references."
  },
  {
    "href": "technical.html#footnotes",
    "title": "Technical Writing",
    "section": "Footnotes",
    "text": "You can include footnotes using the Insert -> Footnote command (or the ⇧⌘ F7 keyboard shortcut). Footnote editing occurs in a pane immediately below the main document:\n\n\n\n\n\n\n\nBy default footnotes will be written in markdown immediately below the block in which they appear. You can customize this behavior via editor options."
  },
  {
    "href": "technical.html#embedded-code",
    "title": "Technical Writing",
    "section": "Embedded Code",
    "text": "Source code which you include in an R Markdown document can either be for display only or can be executed by knitr as part of rendering. Code can furthermore be either inline or block (e.g. an Rmd code chunk).\n\nDisplaying Code\nTo display but not execute code, either use the Insert -> Code Block menu item, or start a new line and type either:\n\n``` (for a plain code block); or\n```<lang> (where <lang> is a language) for a code block with syntax highlighting.\n\nThen press the Enter key. To display code inline, simply surround text with backticks (`code`), or use the Format -> Code menu item.\n\n\nCode Chunks\nTo insert an executable code chunk, use the Insert -> Code Chunk menu item, or start a new line and type:\n```{r}\nThen press the Enter key. Note that r could be another language supported by knitr (e.g. python or sql) and you can also include a chunk label and other chunk options.\nTo include inline R code, you just create normal inline code (e.g. by using backticks or the ⌘ D shortcut) but preface it with r. For example, this inline code will be executed by knitr: `r Sys.Date()`. Note that when the code displays in visual mode it won’t have the backticks (but they will still appear in source mode).\n\n\nRunning Chunks\nYou can execute the currently selected R or Python code chunk using either the run button at the top right of the code chunk or using the ⇧⌘ Enter keyboard shortcut:\n\nYou can execute code chunks up to the current one using the toolbar button or using the ⌥⌘ P keyboard shortcut."
  },
  {
    "href": "technical.html#latex-and-html",
    "title": "Technical Writing",
    "section": "LaTeX and HTML",
    "text": "You can also include raw LaTeX commands or HTML tags when authoring in visual mode. The raw markup will be automatically recognized and syntax highlighted. For example:\n\nThe above examples utilize inline LaTex and HTML. You can also include blocks of raw content using the commands on the Format -> Raw menu. For example, here is a document with a raw LaTeX block:\n\n\n\n\n\n\n\nNote that Pandoc ignores LaTeX commands when not producing LaTeX based output, and ignores HTML tags when not producing HTML based output."
  },
  {
    "href": "index.html#overview",
    "title": "Visual R Markdown",
    "section": "Overview",
    "text": "RStudio v1.4 includes a new visual markdown editing mode. Highlights of visual mode include:\n\nVisual editing for all of Pandoc markdown, including tables, divs/spans, definition lists, attributes, etc.\nExtensive support for citations, including integration with Zotero and the ability to insert citations from DOIs or searches of PubMed, Crossref, and DataCite.\nScientific and technical writing features, including cross-references, footnotes, equations, code execution, and embedded LaTeX.\nWriting productivity features, including real time spell-checking and outline navigation.\nTight integration with source editing (editing location and undo/redo state are preserved when switching between modes).\nRich keyboard support. In addition to traditional shortcuts, you can use markdown expressions (e.g. ##, **bold**, etc.) for formatting. If you don’t remember all of the keyboard shortcuts, you can also use the catch-all ⌘ / shortcut to insert anything."
  },
  {
    "href": "index.html#getting-started",
    "title": "Visual R Markdown",
    "section": "Getting Started",
    "text": "Visual markdown editing is available in RStudio v1.4 or higher. You can download the latest version of RStudio here: https://rstudio.com/products/rstudio/download/.\nMarkdown documents can be edited in either source or visual mode. To switch into visual mode for a given document, use the  button at the top-right of the document toolbar (or alternatively the ⌘⇧ F4 keyboard shortcut):\n\nNote that you can switch between source and visual mode at any time (editing location and undo/redo state will be preserved when you switch)."
  },
  {
    "href": "index.html#using-the-editor",
    "title": "Visual R Markdown",
    "section": "Using the Editor",
    "text": "Keyboard Shortcuts\nThere are keyboard shortcuts for all basic editing tasks. Visual mode supports both traditional keyboard shortcuts (e.g. ⌘ B for bold) as well as markdown shortcuts (using markdown syntax directly). For example, enclose **bold** text in asterisks or type ## and press space to create a second level heading. Here are some of the most commonly used shortcuts:\n\n\n\nCommand\nKeyboard Shortcut\nMarkdown Shortcut\n\n\n\n\nBold\n⌘ B\n**bold**\n\n\nItalic\n⌘ I\n*italic*\n\n\nCode\n⌘ D\n`code`\n\n\nLink\n⌘ K\n<href>\n\n\nHeading 1\n⌥⌘ 1\n#\n\n\nHeading 2\n⌥⌘ 2\n##\n\n\nHeading 3\n⌥⌘ 3\n###\n\n\nR Code Chunk\n⌥⌘ I\n```{r}\n\n\n\nSee the editing shortcuts article for a complete list of all shortcuts.\n\n\nInsert Anything\nYou can also use the catch-all ⌘ / shortcut to insert just about anything. Just execute the shortcut then type what you want to insert. For example:\n\n\n\n\n\n\n\n\n\n\nIf you are at the beginning of a line (as displayed above), you can also enter plain / to invoke the shortcut.\n\n\nEditor Toolbar\nThe editor toolbar includes buttons for the most commonly used formatting commands:\n\nAdditional commands are available on the Format, Insert, and Table menus:\n\n\n\nFormat\nInsert\nTable"
  },
  {
    "href": "index.html#learning-more",
    "title": "Visual R Markdown",
    "section": "Learning More",
    "text": "Check out the following articles to learn more about visual markdown editing:\n\nCitations covers citing other works and managing bibliographies, as well as integration with Zotero (an open source reference management tool).\nTechnical Writing covers features commonly used in scientific and technical writing, including cross-references, footnotes, equations, embedded code, and LaTeX.\nContent Editing provides more depth on visual editor support for tables, lists, pandoc attributes, comments, symbols/emojis, etc.\nMarkdown Formats describes how the visual editor parses and writes markdown, and also includes some tips for usage with Bookdown and Hugo.\nEditing Shortcuts documents the two types of shortcuts you can use with the editor: standard keyboard shortcuts and markdown shortcuts.\nEditor Options enumerates the various ways you can configure the behavior of the editor (font size, display width, markdown output, etc.).\nAdditional Topics discusses various other features including using CSS within HTML documents.\n\nThanks for trying out the visual editor! If you encounter problems or want to suggest features, please let us know at https://github.com/rstudio/rstudio/issues/new/choose."
  },
  {
    "href": "shortcuts.html#shortcuts",
    "title": "Editing Shortcuts",
    "section": "Shortcuts",
    "text": "Here are the available keyboard and markdown shortcuts:\n\n\n\nCommand\nKeyboard Shortcut\nMarkdown Shortcut\n\n\n\n\nBold\n⌘ B\n**bold**\n\n\nItalic\n⌘ I\n*italic*\n\n\nCode\n⌘ D\n`code`\n\n\nStrikeout\n\n~~strike~~\n\n\nSubscript\n\n~sub~\n\n\nSuperscript\n\n^super^\n\n\nHeading 1\n⌥⌘ 1\n#\n\n\nHeading 2\n⌥⌘ 2\n##\n\n\nHeading 3\n⌥⌘ 3\n###\n\n\nHeading Attributes\n\n{#id .class}\n\n\nBlockquote\n\n>\n\n\nCode Block\n⇧⌘ \\\n```\n\n\nR Code Chunk\n⌥⌘ I\n```{r}\n\n\nRaw Block\n\n```{=html}\n\n\nDiv\n\n:::\n\n\nBullet List\n\n-\n\n\nOrdered List\n\n1.\n\n\nTight List\n⌥⌘ 9\n\n\n\nList Check\n\n[x]\n\n\nLink\n⌘ K\n<href>\n\n\nEmoji\n\n:smile:\n\n\nDefinition\n\n:\n\n\nNon-Breaking Space\n⌃ Space\n\n\n\nHard Line Break\n⇧ Enter\n\n\n\nParagraph\n⌥⌘ 0\n\n\n\nImage\n⇧⌘ I\n\n\n\nFootnote\n⇧⌘ F7\n\n\n\nCitation\n⇧⌘ F8\n[@\n\n\nTable\n⌥⌘ T\n\n\n\nEditing Comment\n⇧⌘ C\n\n\n\nSelect All\n⌘ A\n\n\n\nClear Formatting\n⌘ \\\n\n\n\nEdit Attributes\nF4\n\n\n\nRun Code Chunk\n⇧⌘ Enter\n\n\n\nRun Previous Chunks\n⇧⌥⌘ P\n\n\n\n\n\n\n\n\n\n\nFor markdown shortcuts, if you didn’t intend to use a shortcut and want to reverse its effect, just press the backspace key."
  },
  {
    "href": "shortcuts.html#insert-anything",
    "title": "Editing Shortcuts",
    "section": "Insert Anything",
    "text": "You can also use the catch-all ⌘ / shortcut to insert just about anything. Just execute the shortcut then type what you want to insert. For example:\n\n\n\n\n\n\n\n\n\n\nIf you are at the beginning of a line (as displayed above) you can also enter plain / to invoke the shortcut."
  },
  {
    "href": "additional.html#css-styles",
    "title": "Additional Topics",
    "section": "CSS Styles",
    "text": "One of the benefits of authoring with markdown is that your content can be easily published to a wide variety of formats. This is possible in significant measure because of the limitations that markdown imposes: you author in terms of the structure and semantics of your content, rather than worrying about specifically how things will appear.\nSometimes however you know that you’ll be publishing to HTML, and you want to exert more control over how things look. In this case, you can use CSS (Cascading Style Sheets) along with markdown to do custom formatting. This section covers how to:\n\nDefine CSS styles for your document; and\nApply those styles to entities within your document.\n\nIf you are new to CSS, you may want to brush up on the basics before proceeding.\n\n\n\n\n\n\nCSS styles apply only to HTML output, and will not have any impact on the formatting of other output types like PDF or MS Word.\n\n\n\n\nDefining Styles\nThe best way to include CSS styles is to create an external stylesheet (e.g. styles.css), then include it within the output options of your R Markdown document. For example:\n---\ntitle: \"CSS Demo\"\noutput:\n  html_document:\n    css: styles.css\n---\nThe styles.css file might look something like this:\n.important {\n  color: maroon;\n}\n\n.illustration {\n  border: 1px solid rgb(230, 230, 230); \n}\nNote that it’s also possible to define styles inline with a CSS code chunk, but we recommend using an external file for easier manageability.\nWithin a markdown document you can apply one or more CSS classes to various document entities including headings, images, divs, and spans. CSS classes are applied using pandoc attributes. Once you’ve applied a class to an entity, it will derive its formatting from the CSS properties of the specified class.\n\n\nHeadings\nTo add a CSS class to a heading, use the edit button at the top right of the heading that appears when your cursor is within it (or use the F4 keyboard shortcut):\n\nNote the presence of the .important class within the Edit Attributes dialog.\nIn R Markdown, CSS classes applied to headings affect all content beneath the heading (an HTML <section> tag is wrapped around the content by Pandoc), so heading classes are a great way to provide custom styles for entire sections of your document.\n\n\n\n\n\n\nNote that the visual editor doesn’t currently render content using styles applied through CSS classes so you won’t see the custom formatting while editing. You will however see it when rendering and previewing the HTML version of the document.\n\n\n\n\n\nImages\nYou can apply CSS classes to images (for example, to give them a special border) using the standard Image dialog. To do this, double-click the image (or use the F4 shortcut with the image selected) and apply the desired classes:\n\nNote again that the visual editor won’t display your image with the applied CSS classes while editing, however when actually rendering the document to HTML you’ll see the styles reflected.\n\n\nDivs\nDivs are special entities that allow you to apply identifiers and/or styles to a region of a document. Divs are block elements (like paragraphs).\nYou can create divs using the Insert -> Div command, and you can apply attributes (including CSS classes) to divs the same way as you apply attributes to headings (clicking the edit button or using the F4 keyboard shortcut when you are within a div):\n\nNote the presence of the .important class within the Div Attributes dialog.\n\n\nSpans\nSpan are special entities that allow you to apply identifiers and/or styles to a region of text. Spans are inline formatting marks (like bold or italic).\nSpans can be created by selecting text and using the Format -> Span command:\n\nHere we’ve applied a span to the text “customize PDF reports” and we’ve used the span to apply the .important CSS class. Note that as with headings and images the formatting is not displayed in the visual editor, but will be visible when the document is rendered."
  },
  {
    "href": "additional.html#centering-images",
    "title": "Additional Topics",
    "section": "Centering Images",
    "text": "Pandoc markdown doesn’t include a formatting directive for centering block level images. Nevertheless, there are a couple of ways to accomplish this:\n\nYou can use the knitr include_graphics() function along with the fig.align='center' chunk option. This technique has the benefit of working for both HTML and LaTeX output.\nYou can add CSS styles that center the image (note that this technique works only for HTML output).\n\n\nKnitr include_graphics\nTo center an image using the knitr::include_graphics() function, include it within an R code chunk that has the fig.align='center' option (and perhaps other options to control width, etc.). For example:\n\nBe sure to include the echo = FALSE chunk option to prevent the chunk source code from being printed.\n\n\nCentering with CSS\nYou can also use CSS classes or inline styles to center an image (note again that this will work only for HTML output). To do this, double-click the image (or use the F4 shortcut with the image selected) and apply the display: block; margin: 1em auto CSS styles to the image:\n\n\n\n\n\n\n\nAs described in the CSS Styles section above, you can also create a CSS class that encompasses these styles (e.g. .image-centered) and provide that class name rather than inline styles as illustrated above."
  },
  {
    "href": "additional.html#html-embeds",
    "title": "Additional Topics",
    "section": "HTML Embeds",
    "text": "When authoring web pages you sometimes need to embed a snippet of HTML from an external source (e.g. an <iframe> tag to display a YouTube video). To embed HTML snippets in visual mode:\n\nUse the Format -> Raw -> HTML Block command to change the current block to HTML format.\nPaste the HTML snippet into the HTML block.\n\nFor example, here’s what a YouTube snippet looks like within an HTML block:\n\n\n\n\n\n\n\nNote that you can also create an HTML block with a markdown shortcut. Just type ```{=html} and press Enter to create the block."
  },
  {
    "href": "options.html#global-options",
    "title": "Editor Options",
    "section": "Global Options",
    "text": "You can customize visual editing options within R Markdown -> Visual:\n\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nUse visual editing by default\nSwitch to visual mode immediately when creating new R Markdown documents.\n\n\nShow document outline by default\nShow the navigational outline when opening documents in visual mode.\n\n\nEditor content width\nMaximum width for editing content. This is intended to keep editing similar to the width that users will see.\n\n\nEditor font size\nBase font size for editor content (default: inherit from IDE settings).\n\n\nShow margin column indicator in code blocks\nShow vertical line that indicates location of editing margin column (e.g. 80).\n\n\nDefault spacing between list items\nWhether to use tight or normal spacing between list items by default. See Tight Lists for details.\n\n\nAutomatic text wrapping (line breaks)\nWhen writing markdown, automatically insert line breaks after sentences or at a specified column (default: flow text; no auto-wrapping). See Line Wrapping for details.\n\n\nWrite references at end of current\nWrite references (footnotes) at the end of the block or section where they appear, or at the end of the document. See References for details.\n\n\nWrite canonical visual mode markdown in source mode\nUse the visual mode markdown writer when saving markdown from source mode (ensure consistency between documents saved from either mode)."
  },
  {
    "href": "options.html#citation-options",
    "title": "Editor Options",
    "section": "Citation Options",
    "text": "You can customize visual editor citation options within R Markdown -> Citations:\n\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\n\nZotero Library\nLocation of Zotero citation library (Local or Web).\n\n\nZotero Data Directory\nLocation of Zotero local data directory.\n\n\nUse libraries\nZotero libraries to use as reference sources.\n\n\nUse Better BibTeX for citation keys and BibTeX export.\nOptionally use Better BibTeX to generate citation keys and export BibTeX from Zotero (this option appears only if Better BibTeX is installed)."
  },
  {
    "href": "options.html#project-options",
    "title": "Editor Options",
    "section": "Project Options",
    "text": "Global options that affect the way markdown is written can also be customized on a per-project basis. You can do this using the R Markdown pane of the Project Options dialog:\n\nBy default projects inherit the current global settings for markdown writing and Zotero libraries."
  },
  {
    "href": "options.html#file-options",
    "title": "Editor Options",
    "section": "File Options",
    "text": "Global and project options that affect the way markdown is written can also be customized on a per-file basis . You can do this by including an editor_options: markdown key in the YAML front matter of your document. For example:\n---\ntitle: \"My Document\"\nauthor: \"Jane Doe\"\neditor_options:\n  markdown:\n    wrap: 72\n---\nYou might want to do this to ensure that multiple authors on different workstations use the same markdown writing options.\nYou can also instruct RStudio to use these same options when saving files from source mode. To do this add the canonical option. For example:\n---\neditor_options:\n  markdown:\n    wrap: 72\n    canonical: true\n---\nWith canonical: true, edits in visual mode and source mode will result in identical markdown output. This is especially useful if you have multiple authors collaborating using version control, with a mixture of source and visual mode editing among the authors.\nSee the documentation on Writer Options for additional details on markdown writing options."
  }
]